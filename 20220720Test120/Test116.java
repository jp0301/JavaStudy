/*===============================================
     ■■■ 클래스 고급 ■■■
	 - 상속 관계에 있는 클래스들 간의 캐스팅
	   (업 캐스팅, 다운 캐스팅)
  ===============================================*/

// super class, 부모 클래스, 상위 클래스
class SuperTest116
{
	public int a=10, b=20;

	public void write()
	{
		System.out.println("슈퍼 클래스 write() 메소드...");
	}

	public int hap()
	{
		return a + b;
	}
}

// sub class, 자식 클래스, 하위 클래스
class SubTest116 extends SuperTest116
{
	public int b=100, c=200;

	@Override
	public int hap()
	{
		return a + b + c;
	}

	public void print()
	{
		System.out.println("서브 클래스 print() 메소드...");
	}
}

// main() 메소드를 포함하는 외부의 다른 클래스
public class Test116
{
	public static void main(String[] args)
	{
		// sub class(하위 클래스) 기반 인스턴스 생성
		SubTest116 ob1 = new SubTest116();

		System.out.println("ob1.b : " + ob1.b);
		//--==>> ob1.b : 100



		// ○ 업 캐스팅 - 상위 객체의 형식으로 캐스팅한다.
		// SuperTest116 ob2;
		SuperTest116 ob2 = ob1;
        //-- 『SuperTest116 ob2 = (SuperTest116)ob1;』과 동일한 코드

		/*
		학생 원석이 = new 학생();
		포유류 사람;

		포유류 사람 = 원석이;      // 『포유류 사람 = (사람)원석이;』 과 동일한 코드
	
		※ 학생도 포유류

		※ class 포유류     class 학생 extends 포유류
		   {				{
	       }				}

		   비교)
		   byte a = 10;

		   int b = a;			  // 『int b = (int)a;』와 동일한 코드
		
		*/

		System.out.println("ob2.b : " + ob2.b);
		//--==>> ob2.b : 20
		//-- 변수는 객체별로 따로 할당되기 때문에
		//   변수 b는 ob2 의 변수이다.

		System.out.println("합    : " + ob2.hap());
		//--==>> 합    : 310
		//-- hap() 메소드는 오버라이딩(Overriding) 되어 있고
		//   ob2는 oib1을 업캐스팅한 상태의 객체이므로
		//   『SubTest116』의 hap() 메소드를 호출하게 된다.
		//   즉, 메소드는 업캐스팅이 되더라도
		// 재정의(덮어쓰기)한 이상;.. 원래의 기능오로 되돌릴수 있다.

		ob2.write();
		//--==>> 슈퍼 클래스 write() 메소드...

		//ob2.print();
		//--==>> 에러 발생(컴파일 에러)

		// 자바에서
		// 자식은 부모가 누군지 알지만
		// 부모는 자식이 누군지 모른다.

		// ○ 다운 캐스팅
		((SubTest116)ob2).print();
		//--==>> 서브 클래스 print() 메소드...

		// ※ 추가 관찰 -----------------------------------------------------------
		//    다운 캐스팅 가능 여부
		
		// super class (상위 클래스 기반) 인스턴스 생성
		SuperTest116 ob3 = new SuperTest116(); 
		SubTest116 ob4;

		//System.out.println(ob3.c);
		//--==>> 에러 발생(컴파일 에러)
		//-- 상위 객체는 하위 객체의 멤버에 접근하는 것이 불가능하다.
		//   (상위 객체 입장에서는 어떤 하위 객체가 존재하는지도 알 수 없음)

		// ob4 = ob3;
		//--==>> 에러 발생(컴파일 에러)
		//-- 상위 객체는 하위 객체에 담을 수(참조할 수) 없다.

		// 부모 ob1 = new 부모(); 상위 클래스만 메모리에 올라간다.
		// 자식 ob2 = new 자식(); 상위 하위 클래스 둘다 메모리에 올라간다.

		//ob4 = (SubTest116)ob3;
		//--==>> 에러 발생(런타임 에러)
		//-- 작성된 구문의 문법적인 구조만 봤을 때
		//   다운 캐스팅이 이루어지는 상황이다.
		//   하지만, 정상적인 캐스팅이 이루어지지 않는다.
		//   현재 SubTest116 객체에 대해 메모리 할당이 이루어지지 않은 상태이기 때문에
		//   다운 캐스팅은 불가능한 것이다.

	}
}

/*
○ 업 캐스팅, 다운 캐스팅이 정상적으로 이루어지는 경우 -----------------------------------------------------
	
	1. 하위 객체 생성;	  // check~!!!!!!!!!!!!!
	2. 상위 = 하위;		  //업 캐스팅. 정상.
	3. 하위 = 상위;       // 에러 발생
	4. 하위 = (하위)상위; // 다운 캐스팅. 정상.

○ 다운 캐스팅이 정상적으로 이루어지지 않는 경우 ------------------------------------------------------------
 
	1. 상위 객체 생성;     // check~!!!!!!!!!!!!
	2. 하위 = 상위;		   // 에러 발생.
	3. 하위 = (하위)상위;  // 다운 캐스팅. 런타임 에러 발생.

※ 업 캐스팅은 항상 가능. 다운 캐스팅은 경우에 따라 가능.

*/

