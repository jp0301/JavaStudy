───────────────────────────────────────────────────────────────────────────────────────────────────
───────────────────────────────────────────────────────────────────────────────────────────────────
2022-07-11(3주차 월요일)
───────────────────────────────────────────────────────────────────────────────────────────────────
───────────────────────────────────────────────────────────────────────────────────────────────────
▶ 왜 항상 main()인가? -  프로그램 실행과정에서 자바 인터프리터가 main을 찾아서 실행시키기 때문.
                        자바 프로그램의 시작은 main() 이라는 이름의 메소드를 실행하는데에서 시작한다.
───────────────────────────────────────────────────────────────────────────────────────────────────
▶ public static void hiEveryone(int age) -『int age』는 매개변수
 - 메소드가 필요한 것을 전달해주는 영역, 넘겨주는 영역
 - 변수를 선언하는 구문과 똑같다. → 매개변수는 변수 선언 구문처럼 사용한다.
 - 매개변수는 2개, 3개, ... 여러개 넘겨줄 때도 있고 안넘겨줄 때도 있다.
 - 일반 변수 선언과 다르게 봐야할 점은 
   hiEveryone(int age, height) 이렇게 하면 안됨, 주의!
   hiEveryone(int age, int height) 이렇게 해야 한다.
 - 그리고 순서대로 전달된다.
───────────────────────────────────────────────────────────────────────────────────────────────────
▶ 클래스 내의 메소드 위치는 상관없다.
 - main() 메소드가 위에 있고 다른 메소드가 아래에 있나 위에 있나 상관없다.
 - main() 메소드 내에서는 순차적으로 진행되는 것은 맞지만 클래스 내의 메소드 위치는 얼마든지 뒤바뀔 수 있다.
 - main() 메소드는 어디에 있든 제일 먼저 실행된다.
───────────────────────────────────────────────────────────────────────────────────────────────────
▷ hiEveryone(12); → 메소드를 호출한다.

▷ public static void hiEveryone(int age) { ... }; → 메소드를 정의한다.
 - 메소드를 정의하면서 int타입의 age가 필요하다고 정의하여 메소드를 호출하면서 숫자 12를 넘겨줬다.
 - 넘겨받은 12라는 숫자에 age라는 이름을 붙이겠다는 것.
 - age로 넘겨받은 값을 hiEveryone 메소드 내에서 사용되어 출력
───────────────────────────────────────────────────────────────────────────────────────────────────
■■■ 매개변수가 2개인 메소드 ■■■
▶ public static void hiEveryone(int age, double height) { ... };
 - 전달 순서대로 저장한다.
 - main()메소드에 double myHeight=175.9; 하고 메소드 호출에 myHeight를 사용한다면
 - 메소드 정의에 가서 int age, double height로 정의되어 있어도 myHeight를 height에 매개변수로 받을 수 있다.

▶ public static void byEveryone() { ... }; → 전달되는 것 없음
 - 메소드의 매개변수 없이 정의되어 있으면 호출할 때도 아무것도 없이 호출해야 한다.
───────────────────────────────────────────────────────────────────────────────────────────────────
■■■ 값을 반환하는 메소드 ■■■
▶ main(), hiEveryone()
 - 메소드 이름, ( ) 괄호 앞의 이름이 메소드의 이름이다.

▷ void 메소드이름(매개변수 또는 없음) { ... };
 - 메소드의 이름 바로 앞에는 일을 하고난 후, 그 지점에 무엇을 남겨두고 가는지를 작성하는 것이다.
 - 어떤 값을 두고 간다. 라는 것을 명시.
   이 메소드를 불러다 쓸 때는 이 값을 두고가는 것이니깐 받을 수 있는 환경을 준비를 하자는 것이다.

 - 왜 명시하는 것인가?
   메소드를 불러다쓸 때 적어도 메소드가 일을 하고 두고 가는 것을
   수용할 만큼의 환경을 만들어 놓고 불러야 하는 것

 - 그래서 그러한 것들을 "리턴 자료형" 또는 "반환 자료형"이라고 부른다.
 
 - 아무것도 두고가지 않는 메소드도 있다. 그냥 자기할 일 하고 가버리는 메소드.
   → 그러한 메소드는 사실 이름 앞에 아무것도 없어야 하는데...
   → hiEveryone()메소드를 봤을 때는 출력을 했다고 특정한 값이 남는 것이 아니다.

---
 - int sum(int num1, int num2) { int result=0; result= num1+num2; return result; };
   → int를 반환하는 메소드이다! 리턴 자료형은 int여야 한다.
▶ ① 문법적인 선점
 - sum(int num1, int num2) { System.out.println(num1 + " + " + num2 };
 - 아무것도 명시하지 않는 문법을 사용할 수 없다.
▷ void
 - 값을 반환하지 않을 때는 문법적으로 비워 둘 수가 없어서, 공허함을 반환하기 위해 void를 약속함
───────────────────────────────────────────────────────────────────────────────────────────────────
■■■ 키워드 return 지니는 두 가지 의미 ■■■
1. 값의 반환
2. 메소드의 종료
───────────────────────────────────────────────────────────────────────────────────────────────────
■■■ 6.2 변수의 스코프 ■■■
스코프 : 생명 주기, 라이프 사이클, 가시성
※ 선언된 지역을 벗어나면 변수는 자동 소멸된다!
───────────────────────────────────────────────────────────────────────────────────────────────────
■■■ 6.3 메소드의 재귀호출 ■■■
자료구조와 알고리즘 필수로 꾸준히 놓지말고 공부해야한다.
재귀가 상당히 난해한데 팁이 있다.

▶ 재귀의 메소드 정의
재귀 : 다시 돌아간다는 개념
5! = 5x4x3x2x1  → 5! = 5x4! ( n x (n-1)! ) n이 2이상일때만
                  1! = 1 (그냥 1이다.) n이 1일때만

 - 복사본을 만들어 보며 해보면 빠져나올 수 있다.
 - 자바도 복사본을 만들어서 실행한다. 코드의 복사본이 실행이 되는 것이 맞다.
───────────────────────────────────────────────────────────────────────────────────────────────────
───────────────────────────────────────────────────────────────────────────────────────────────────
■■■ 7장 클래스와 인스턴스 ■■■
───────────────────────────────────────────────────────────────────────────────────────────────────
───────────────────────────────────────────────────────────────────────────────────────────────────
클래스와 인스턴스는 자바의 모든 내용을 통틀어서 가장 중요한 부분이다.

객체 지향 프로그래밍 기법 Object Oriented Programming(OOP) = 객체 중심 프로그래밍 기법
객체 지향 프로그램 언어 = 객체 중심 프로그램 언어
----
--------

▶ 클래스를 구성하는 것은 변수와 메소드다.
 - 객체의 설계도를 구성하는 것은 속성과 기능이다.
 - 빨,파,검 보드마카는 서로 다른 객체이지만 하나의 설계도를 가지고 만들었다.

▶ '객체'란 무엇인가???
 - 현실에 존재하는 모든 것을 말한다.
 - Object

▶ 객체를 구성하는 것은 속성과 기능이다.
 - 속성 : 객체의 상태값들
 - 기능 : 동작, 행위, 속성의 값을 다르게 만드는 행위
───────────────────────────────────────────────────────────────────────────────────────────────────
 클래스는 → 설계한다.
(설계도)
 클래스를 기반으로 객체(인스턴스)가 생성이 되어야 무언가 만들어졌다라고 표현을 한다.

// BufferedReader 인스턴스 생성
BufferedReader br = new BufferedReader(); 실체화되었다.
설계도는 같지만 다른 형태로 실체화, 상품화 시켰다. - 2개는 다른 객체(인스턴스)다.
 ex) 인스턴스 던전 - 인던

//인스턴스 생성 구문
FruitSeller fs = new FruitSeller();
--------------   ------------------
 참조 변수 선언    메모리에 설계도대로 퍼올리는 행위를 거쳐 실체화 되는 과정을 인스턴스 생성 또는 객체 생성이라 함

FruitSeller fs1 = new FruitSeller();
FruitSeller fs2 = new FruitSeller();
------------------------------------
둘은 같은 객체가 아니다. 설계도는 같은 설계도 기반으로 만들어졌지만 fs1, fs2 라는 독립된 객체들이다.

변수의 상수화 『final』  ex) final int APPLE_PRICE = 1000;
                           final double PI = 3.141592;

생성자의 이름은 클래스와 이름이 일치해야 하기 때문에 첫 글자 대문자일 수밖에 없다.
 -> 첫 글자가 대문자인 게 등장했다. 하면 거의 생성자이다.
 -> 생성자 안에서만큼은 문법적으로 final 변수를 초기화 시킬 수 있다.

생성자 → 인스턴스 생성 과정에서 딱 한 번 호출~!!
생성자의 특권 -> 너 안에서만큼은 final 변수를 초기화 시킬 수 있는 특권을 줄게!

───────────────────────────────────────────────────────────────────────────────────────────────────



───────────────────────────────────────────────────────────────────────────────────────────────────

───────────────────────────────────────────────────────────────────────────────────────────────────

───────────────────────────────────────────────────────────────────────────────────────────────────

───────────────────────────────────────────────────────────────────────────────────────────────────

















