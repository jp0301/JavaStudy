/*========================================
      ■■■ 클래스와 인스턴스 ■■■
    - 클래스 설계
	- 배열의 활용
	- 접근제어지시자와 정보은닉
  =======================================*/

// 사용자로부터 년, 월, 일을 입력받아
// 해당 날짜의 요일을 출력하는 프로그램을 구현한다.
// 단, 달력 클래스(Calendar)는 사용하지 않는다.
// 또한, 클래스의 개념을 활용하여 작성할 수 있도록 한다. (→ WeekDay 클래스 설계)
// 그리고, 배열의 개념도 적용시켜 작성할 수 있도록 한다.
// 접근제어지시자의 개념도 확인하여 작성할 수 있도록 한다.
// 최종적으로...
// WeekDay 클래스 설계를 통해
// Test099 클래스의 main() 메소드가 정상적으로 프로그램 실행될 수 있도록 한다.

// 실행 예)
// 년 월 일(공백 구분) : 2022  7 15
// >> 2022년 7월 15일 → 금요일
// 계속하려면 아무 키나 누르세요...

/* Hint
  - 1년 1월 1일 → "월요일"
  - 1년은 365일이 아니다.
  - 2월의 마지막 날짜가 29일 → 윤년
  - 2월의 마지막 날짜가 28일 → 평년
  - 윤년의 판별 조건
    → 년도가 4의 배수이면서 100의 배수가 아니거나, 
	   400의 배수이면 윤년,그 이외의 년도는 평년
*/


import java.util.Scanner;

class WeekDay
{	/*
	private int y;
	private int m;
	private int d;

	void input()
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.print("년 월 일(공백 구분) : ");
		y = sc.nextInt();
		m = sc.nextInt();
		d = sc.nextInt();
	}

	String calDate()
	{   // 공간번호는   0                                         11
		// 월           1  2   3   4   5   6   7   8   9  10  11  12
		int[] month = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		//                     0         1         2         3         4         5         6
		String[] dayName = {"일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"};

		// 윤년 평년 판별해서 month[1] 공간(2월달 날짜란)에 채워넣기
		if((y % 4 == 0 && y % 100 != 0) || y % 400 == 0)
			month[1] = 29;
		else
			month[1] = 28;

		int n; // 입력한 날짜까지 몇일인지 담을 변수


		// 1.1.1 ~ 2021.12.31 날 수 계산
		n = (y-1)*365 + (y-1)/4 -(y-1)/100 + (y-1)/400;
		// 4년에 한번 + 100년에 한번 - 400년마다 하루 +

		// (2021 * 365) + (2021/4) - (2021/100) + (2021/400)
		// 737,665 + 505 - 20 + 5
		// = 738,155

		// 2022.1.1 ~ 2022.6.31 날 수 계산
		for(int i = 0; i < (m-1); i++)
		{
			n += month[i]; // n += (month[0] ~ month[6])
		}
		// 2022년은 평년이므로 2월은 28일...
		// 738,155 + 181 = 738,336


		// 2022.7.1 ~ 2022.7.15 날 수 계산
		n += d;
		// 738,336 + 15 = 738,351

		int w = n % 7;
		// 738,351 % 7 = 5가 나옴

		return dayName[w];
		// return dayName[5]; → 금요일
	}

	void print(String day)
	{
		System.out.printf(">> %d년 %d월 %d일 → %s\n", y, m, d, day); 
	}
	*/



	// ※ 함께한 풀이

	// 주요 변수 선언
	private int y, m ,d;				//-- 사용자가 입력한 연, 월, 일을 담아낼 변수
	
	// 메소드 정의 → 기능 : 연, 월, 일 입력받기
	public void input()
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.print("년 월 일(공백 구분) : ");		// 2022 7 15
		y = sc.nextInt();
		m = sc.nextInt();
		d = sc.nextInt();
	}

	// 메소드 정의 → 기능 : 요일 산출하기
	public String week()
	{
		// 각 월의 마지막 날짜(각 월의 최대값)를 배열 형태로 구성
		int[] months = {31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		
		//테스트
		//System.out.println(months.length);
		//--==>> 12
		
		// 각각 요일의 이름을 배열 형태로 구성
		String[] weekNames = {"일요일", "월요일", "화요일",
							  "수요일", "목요일", "금요일", 
							  "토요일"};
		// 날 수를 종합할 변수
		int nalsu;

		// 윤년에 따른 2월의 날 수 계산
		// 입력 년도가 윤년이라면... 2월의 마지막 날짜를 29일로 설정
		// 입력 년도가 평년이라면... 2월의 마지막 날짜를 28일로 설정
		if((y % 4 == 0 && y % 100 != 0) || y % 400 == 0) //-- 입력 년도가 윤년이라면
			months[1] = 29;
		else											 //-- 입력 년도가 평년이라면
			months[1] = 28;



		// ① 1년 1월 1일 부터 입력받은 년도의 이전 년도 12월 31일까지의 날 수
		//                     -------------
		//                           y
		//                     --------------------------
		//                                (y-1)

		nalsu = (y-1)*365 + (y-1)/4 -(y-1)/100 + (y-1)/400;
		//      ---------   ------- ----------   ---------
		//     1년기본주기 4년마다+1 100년마다+1(X) 400년마다+1

		// 테스트
		//System.out.println("날 수 : " + nalsu);
		//--==>> 년 월 일 입력(공백 구분) : 2022 7 15
		//       날 수 : 738155 → 1.1.1 ~ 2021.12.31


		// ② 입력받은 월의 이전 월 까지의 날 수 계산 후
		//    이 계산 결과를 1번 결과에 더하는 연산
		for(int i = 0; i < (m-1); i++)
		{
			nalsu += months[i];
		}
		// 테스트
		//System.out.println("날 수 : " + nalsu);
		//--==>> 년 월 일 입력(공백 구분) : 2022 7 15
		//       날 수 : 738336→ 1.1.1 ~ 2022.6.30


		// ③ 입력받은 일의 날짜만큼 날 수 계산 후
		//    이 계산 결과를 2번 결과에 더하는 연산
		nalsu += d;

		// 테스트
		//System.out.println("날 수 : " + nalsu);
		//--==>> 년 월 일 입력(공백 구분) : 2022 7 15
		//       날 수 : 738351→ 1.1.1 ~ 2022.7.15

		//---------------------------------------여기까지 수행하면 날 수 연산 끝~!!!
		
		
		int w = nalsu % 7; //-- 전체날수 % 7 == 0 → 일요일
						   //-- 전체날수 % 7 == 1 → 월요일
						   //             :
						   //-- 전체날수 % 7 == 6 → 토요일


		return weekNames[w];
	}



	// 메소드 정의 → 기능 : 결과 출력하기
	public void print(String day)
	{
		System.out.printf(">> %d년 %d월 %d일 → %s\n", y, m, d, day);
	}
	

}


public class Test099
{
	public static void main(String[] args)
	{

		// WeekDay 클래스 기반 인스턴스 생성
		WeekDay wd = new WeekDay();

		wd.input();

		String result = wd.week();

		wd.print(result);

	}
}


//실행 결과
/*
년 월 일(공백 구분) : 2023 1 16
>> 2023년 1월 16일 → 월요일
계속하려면 아무 키나 누르십시오 . . .
*/

/*
년 월 일(공백 구분) : 1998 3 1
>> 1998년 3월 1일 → 일요일
계속하려면 아무 키나 누르십시오 . . .
*/